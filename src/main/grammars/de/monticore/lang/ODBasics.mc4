/* (c) https://github.com/MontiCore/monticore */

/* Beta-version: This is intended to become a MontiCore stable grammar. */

package de.monticore.lang;

grammar ODBasics extends de.monticore.types.MCFullGenericTypes, de.monticore.UMLModifier,
                          de.monticore.expressions.ExpressionsBasis {
      
    /*========================================================================*/
    /*=========================== Artifact ===================================*/
    /*========================================================================*/
    
    /** ASTODArtifact represents the complete Diagram
      @attribute package The package declaration of this Objectdiagram
      @attribute importStatements List of imported elements
      @attribute oDConformsStatement List of conform statements
      @attribute objectDiagram the ObjectDiagram
    */
    ODArtifact =
      ("package" package:(Name& || ".")+ ";")?
      MCImportStatement*
      ODConformsStatement*
      ObjectDiagram;

    /*========================================================================*/
    /*================== INTERFACES AND EXTERNAL SYMBOLS =====================*/
    /*========================================================================*/

    /**
     * ASTODValue represents the interface for all possible value assignments
     */
    interface ODValue;

    /*========================================================================*/
    /*============================ ENUMERATIONS ==============================*/
    /*========================================================================*/

    enum AssocDirection =
      LEFTTORIGHT:"->" | RIGHTTOLEFT:"<-"| BIDIRECTIONAL:"<->" | UNSPECIFIED:"--";

    enum LinkForm =
      LINK: "link" | AGGREGATION: "aggregation" | COMPOSITION: "composition";

    /*========================================================================*/
    /*============================== Grammar =================================*/
    /*========================================================================*/

    /** ASTODConformsStatement represents a conform statement
      @attribute qualifiedName Qualified name of the artifact the OD is conform to
    */
  	ODConformsStatement =
	  "conformsTo" MCQualifiedName ";";

    /** ASTObjectDiagram represents a UML Objectdiagram
      @attribute stereotype  Optional Stereotype
      @attribute name        Name of this Objectdiagram
      @attribute oDObject    List of Objects of this Objectdiagram
      @attribute oDLink      List of Links of this Objectdiagram
    */
    symbol scope ObjectDiagram =
      Stereotype?
      "objectdiagram" Name
      "{"
      ( ( ODObject | ODLink ) ";" )*
      "}";

    /** ASTODObject represents an Object in a UML Objectdiagram
      @attribute modifier Optional Modifier of this object
      @attribute oDName Optional extended name of this object
      @attribute referenceType Required type of this object
      @attribute oDAttributes List of attributes of this object
    */
    /** SH: ODName optional -> keine Symobole f√ºr anonyme Objekte. */
    symbol ODObject implements ODValue <20> =
      Modifier?
	  ODName? ":" MCType
        "{" ODAttribute* "}";

    astrule ODObject =
      method public String getName() {
        if (isPresentODName()) {
            return getODName().getName();
         }
        return "";
      };

    /** ASTODAttribute represents an Attribute of an Object
      @attribute stereotype Optional stereotype of this attribute
      @attribute modifier Optional modifier of this attribute
      @attribute type Optional type of this attribute
      @attribute name Name of this Attribute
      @attribute complete True if attribute has a "complete" assignment
      @attribute partial True if attribute has a "partial" assignment
      @attribute oDValue Attribute value in form of an ODValue
      @attribute oDList Attribute value in form of an ODList
      @attribute oDMap Attribute value in form of an ODMap
    */
    ODAttribute =
      Stereotype?
      Modifier?
      MCType?
      Name
      /** SH: Expression neu zur Erweiterung durch Expressions. */
      ( (complete:"="|"->") ( ODValue | ODList | ODMap | ODExpression ) )? ";";

    /** ASTODList represents a List of ODValues
      @attribute oDValue List of ODValue
    */
    ODList =
      "[" (ODValue || ",")* "]";

    /** ASTODMap represents a Map of values
      @attribute oDMapElement List of ODMapElements
    */
    ODMap =
      "[" (ODMapElement || ",")* "]";

    /** ASTODMapElement represents a Map element of ODMap.
        It can be either a concrete ODObject or a concrete ODValue.
      @attribute key Key element of the key value pair
      @attribute val Value element of the key value pair
    */
    ODMapElement =
      key:ODValue "->" val:ODValue;

    /** ASTODLinkQualifier represents Qualifier for Links between Objects.
        It can be either a concrete attribute name or a concrete value.
      @attribute name Name of a referenced attribute (if set)
      @attribute oDValue Concrete value of this qualifier (if set)
    */
    ODLinkQualifier = "[[" Name "]]" | "[" ODValue "]";

    /** ASTODLink represents a Link between Objects
      @attribute stereotype Optional Stereotype
      @attribute Link True if Link is of type "link"
      @attribute Aggregation True if Link is of type "aggregation"
      @attribute Composition True if Link is of type "composition"
      @attribute derived True if this is a derived Link
      @attribute Name Name of the Association of this Link
      @attribute leftModifier Optional left side Modifier
      @attribute leftReferenceNames List of References of the Objects on the left side of this Link
      @attribute leftQualifier Qualifier of the left side of this Link
      @attribute leftRole Role of Objects on the Links left side
      @attribute leftToRight True if Link is navigable from left to right ("->")
      @attribute rightToLeft True if Link is navigable from right to left ("<-")
      @attribute bidirectional True if Link is navigable in both directions ("<->")
      @attribute unspecified True if navigation of Link is not specified ("--")
      @attribute rightRole Role of Objects on the Links right side
      @attribute rightQualifier Qualifier of the right side of this Link
      @attribute rightReferenceNames List of References of the Objects on the right side of this Link
      @attribute rightModifier Optional right side Modifier
    */
    ODLink =
      Stereotype?
      LinkForm
      ([derived:"/"])?
      Name?
      leftModifier:Modifier?
      leftReferenceName:(ODName || ",")+
      leftQualifier:ODLinkQualifier?
      ("(" leftRole:Name ")")?
      AssocDirection
      ("(" rightRole:Name ")")?
      rightQualifier:ODLinkQualifier?
      rightReferenceName:(ODName || ",")+
      rightModifier:Modifier?;

    /** ASTODAbsent represents implementation of the ODValue interface
        that represents an absent optional value.
      @attribute absent True if attribute is optional and has an empty value
    */
    ODAbsent implements ODValue <10> =
      _absent:["absent"];

    ODLiteral implements ODValue <40> =
      Literal;

    ODExpression implements ODValue <30> =
      Expression;

    ODName implements ODValue <50> = Name;

}
