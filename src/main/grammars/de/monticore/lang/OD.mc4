package de.monticore.lang;

grammar OD extends de.monticore.common.Common { 
      
    /*========================================================================*/
    /*=========================== CompilationUnit ============================*/
    /*========================================================================*/
    
    /** ASTODCompilationUnit represents the complete Diagram
      @attribute package The package declaration of this Objectdiagram
      @attribute importStatements List of imported elements
      @attribute oDConformsStatement
      @attribute oDDefinition   
    */
    ODCompilationUnit =
      ("package" package:(Name& || ".")+ ";")?
      (ImportStatement)*
      ODConformsStatement?
      ODDefinition;


    /*========================================================================*/
    /*================== INTERFACES AND EXTERNAL SYMBOLS =====================*/
    /*========================================================================*/

    /** ASTODDate represents a Date Format in a UML Objectdiagram
        @attribute year
        @attribute month
        @attribute day
        @attribute hour
        @attribute minute
        @attribute second
    */
    interface ODDate =
        year:IntLiteral+ day:IntLiteral
        hour:IntLiteral+ minute:IntLiteral+ second:IntLiteral+;

    /*========================================================================*/
    /*============================== Grammar =================================*/
    /*========================================================================*/

    /** ASTODConformsStatement represents a conform statement
      @attribute conformedModels    List of conformed models 
    */
  	ODConformsStatement =
	  "conformsTo" conformedModels:(QualifiedName || ",")+ ";";
	  
	  
    /** ASTODDefinition represents a UML Objectdiagram
      @attribute stereotype   Optional Stereotype
      @attribute name         Name of this Objectdiagram
      @attribute oDObjects    List of Objects of this Objectdiagram
      @attribute oDLinks      List of Links of this Objectdiagram
    */
    ODDefinition@! =
      Stereotype?
      "objectdiagram" Name
      "{"
      (
        oDObjects:ODObject
        |
        oDLinks:ODLink
      )*
      "}";
    
    
    /** ASTODObject represents an Object in a UML Objectdiagram
      @attribute modifier     Optional Modifier of this Object
      @attribute name         Optional Name of this Object
      @attribute type         Optional Type of this Object
      @attribute oDAttributes List of Attributes of this Object
    */
    ODObject@! =
      Modifier?
	  ( (Name | name:ODName) (":" type:ReferenceType)? | (":" type:ReferenceType))
      (
        ("{" (oDAttributes:ODAttribute | innerLinks:ODInnerLink)* "}")
        |
        ";"?
      );
    
    
    /** ASTODAttribute represents an Attribute of an Object
      @attribute modifier Optional Modifier of this Attribute
      @attribute type     Type of this Attribute
      @attribute name     Name of this Attribute
      @attribute value    Value of this Attribute
    */
    ODAttribute =
      Modifier?
      Type?
      Name
      ("=" (ODValue | ODValueList | ODValueMap))? ";";
        
        
    /** ASTODLinkQualifier represents a reference to a Qualifier of Links 
        between Objects. The reference can be either a concrete attribute
        name or a concrete value.
      @attribute name     Name of a referenced attribute (if set)
      @attribute value    Concrete value of this qualifier (if set)
    */
    ODLinkQualifier = "[[" Name "]]" | "[" ODValue "]";

    
    /** ASTODLink represents a Link between Objects
      @attribute stereotype          Optional Stereotype
      @attribute Link                True if Link is of type "link"
      @attribute Aggregation         True if Link is of type "aggregation"
      @attribute Composition         True if Link is of type "composition"
      @attribute derived             True if this is a derived Link
      @attribute Name                Name of the Association of this Link
      @attribute leftModifier        Optional left side Modifier
      @attribute leftReferenceNames  List of References of the Objects on the
                                     left side of this Link
      @attribute leftQualifier       Qualifier of the left side of this Link
      @attribute leftRole            Role of Objects on the Links left side
      @attribute leftToRight         True if Link is navigable from 
                                     left to right ("->")
      @attribute rightToLeft         True if Link is navigable from 
                                     right to left ("<-")
      @attribute bidirectional       True if Link is navigable in 
                                     both directions ("<->")
      @attribute simple              True if navigation of Link is 
                                     not specified ("--")
      @attribute rightRole           Role of Objects on the Links right side
      @attribute rightQualifier      Qualifier of the right side of this Link
      @attribute rightReferenceNames List of References of the Objects on the
                                     right side of this Link
      @attribute rightModifier       Optional right side Modifier
    */
    ODLink =
      Stereotype?
      (
        ["link"]
        | ["aggregation"]
        | ["composition"]
      )
      ([derived:"/"])?
      Name?
      leftModifier:Modifier?
      (leftReferenceNames:ODName |leftReferenceNames:Name) ("," (leftReferenceNames:ODName | leftReferenceNames:Name))*
      leftQualifier:ODLinkQualifier?
      ("(" leftRole:Name ")")?
      (
        leftToRight:["->"]
        | rightToLeft:["<-"]
        | bidirectional:["<->"]
        | unspecified:["--"]
      )
      ("(" rightRole:Name ")")?
      rightQualifier:ODLinkQualifier?
      (rightReferenceNames:ODName |rightReferenceNames:Name) ("," (rightReferenceNames:ODName | rightReferenceNames:Name))*
      rightModifier:Modifier?
      ";";

    ODInnerLink = 
	  linkName:Name ("=" | aggregable:["->"]) (ODInnerObject | ("[" ((ODInnerObject || ",")* | (ODQualifiedInnerObject || ",")*) "]"))";";
	  
    /** ASTODInnerObject represents an Object in a UML Objectdiagram
      @attribute name         Optional Name of this Object
      @attribute type         Optional Type of this Object
      @attribute oDAttributes List of Attributes of this Object
      @attribute oDInnerLink List of inner OD links
    */
    ODInnerObject@! =
	  ( (Name | name:ODName) (":" type:ReferenceType)? | (":" type:ReferenceType))
      (
        ("{" (oDAttributes:ODAttribute | innerLinks:ODInnerLink)* "}")?
      );

    /** ASTODInnerObject represents an Object in a UML Objectdiagram
      @attribute name         Optional Name of this Object
      @attribute type         Optional Type of this Object
      @attribute oDAttributes List of Attributes of this Object
      @attribute oDInnerLink List of inner OD links
    */
	ODQualifiedInnerObject =
	  (Name | ODValue) "->" ODInnerObject;

    /** ASTODValueList represents a List in a UML Objectdiagram
      @attribute values List of possible values
    */
    ODValueList =
      "[" values:(ODValue || ",")* "]" ;

    /** ASTODValueMap represents a Map in a UML Objectdiagram
      @attribute entries List of Mappings
    */
    ODValueMap = 
      "[" entries:(ODEntry || ",")* "]" ;

    /** ASTODEntry represents a (Key, Value)-Pair in a UML Objectdiagram
      @attribute key
      @attribute value
    */
    ODEntry = key:ODValue "->" value:ODValue;

    /** ASTODValue represents possible values in a UML Objectdiagram
      @attribute oDOptionals Values in form of Optionals
      @attribute oDDate ODDate object
      @attribute signedLiteral Possible Literals
    */
    ODValue = ODOptionals | ODDate | SignedLiteral;

    /** ASTODOptionals represents Optional Objects in a UML Objectdiagram
      @attribute optEmpty Indicates whether the optional is empty
      @attribute optValue Represents the optional value
    */
    ODOptionals = optEmpty:["Optional.Empty"] | ("Optional.of(" optValue:SignedLiteral ")");

    /**
    /*  DateFormat "yyyy-MM-dd HH:mm:ss"
    */
    ODDateV1 implements ODDate =
        year:IntLiteral+ "-" month:IntLiteral+ "-" day:IntLiteral
        hour:IntLiteral+ ":" minute:IntLiteral+ ":" second:IntLiteral+;

    /**
    /*  DateFormat "yyyy.MM.dd HH:mm:ss"
    */
    ODDateV2 implements ODDate =
        year:IntLiteral+ "." month:IntLiteral+ "." day:IntLiteral
        hour:IntLiteral+ ":" minute:IntLiteral+ ":" second:IntLiteral+;

    /**
    /*  DateFormat "yyyy/MM/dd HH:mm:ss"
    */
    ODDateV3 implements ODDate =
        year:IntLiteral+ "/" month:IntLiteral+ "/" day:IntLiteral
        hour:IntLiteral+ ":" minute:IntLiteral+ ":" second:IntLiteral+;

    token ODName = '@'
    	( 'a'..'z' | 'A'..'Z' | '0'..'9' 
    	| '_' | '$' | '-' | '+' | '.' | '!' | '§' | '$' | '%' | '@' | '*'
    	| 'ä' | 'Ä' | 'ö' | 'Ö' | 'ü' | 'Ü' | 'ß')* 
    	('('.*?')')?;
        
}
