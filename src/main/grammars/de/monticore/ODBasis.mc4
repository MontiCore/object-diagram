/* (c) https://github.com/MontiCore/monticore */
package de.monticore;

/* This is a MontiCore stable grammar.
 * Adaptations -- if any -- are conservative. */

/**
   ODBasis is the basis for  the OD grammars
   describing UML object diagrams (in the UML/P variant).

   ODBasis defines the core structure of object diagrams,
   consisting of objects (with potentially hierarchical nesting)
   and explicit links.   
*/ 


component grammar ODBasis extends de.monticore.UMLModifier,
                        de.monticore.types.MCBasicTypes,
                        de.monticore.symbols.OOSymbols,
                        de.monticore.expressions.CommonExpressions {

  /*========================================================================*/
  /*=========================== Artifact ===================================*/
  /*========================================================================*/

  /** ASTODArtifact represents the complete Diagram
   * @attribute package The package declaration of this Objectdiagram
   * @attribute importStatements List of imported elements
   * @attribute oDConformsStatement List of conform statements
   * @attribute objectDiagram the ObjectDiagram
   */
  ODArtifact =
    MCPackageDeclaration?
    MCImportStatement*
    ObjectDiagram;

  /*========================================================================*/
  /*================== INTERFACES AND EXTERNAL SYMBOLS =====================*/
  /*========================================================================*/

  /**
   * ASTODValue represents the interface for all possible values
   */
  interface ODValue;

  /**
   * ASTODElement represents the interface for all possible statements 
   * in OD (which are in the basis version: objects and links)
   */
  interface ODElement;

  /**
   * ODObject represents the interface for all possible variants of objects
   * in an OD.
   *   @attribute Modifier Optional Modifier of this object
   *   @attribute MCObjectType Required type of this object
   *   @attribute ODAttribute List of attributes of this object
   */
  interface ODObject extends ODElement = Modifier? MCObjectType ODAttribute*;

  /*========================================================================*/
  /*===================== Grammar, Diagramm, and Object ====================*/
  /*========================================================================*/

  /** ASTObjectDiagram represents a UML Objectdiagram
   *  consisting of object and link definitions.
   *  @attribute stereotype  Optional Stereotype
   *  @attribute name        Name of this Objectdiagram
   *  @attribute oDObject    List of Objects of this Objectdiagram
   *  @attribute oDLink      List of Links of this Objectdiagram
   */
   // TODO SH: Diagram Symbol einbauen "ObjectDiagram implements Diagram"
  symbol scope ObjectDiagram =
    Stereotype?
    "objectdiagram" Name
    "{"
      ( ODElement ";" )*
    "}";

  /** AST-ODNamedObject represents an Object in a UML Objectdiagram.
   *  The object contains attributes and may be hierarchically decomposed.
   *  @attribute modifier Modifier of the object.
   *  @attribute name Name of the object.
   *  @attribute mCObjectType Type of the object.
   *  @attribute oDAttribute List of attributes of the object.
   */
  ODNamedObject implements ODObject, ODValue, Variable =
    Modifier?
    Name ":" MCObjectType
      "{" ODAttribute* "}";

  /** AST-ODAnonymousObject represents an anonymous Object in a UML
   *  Objectdiagram.
   *  The object contains attributes and may be hierarchically decomposed.
   *   @attribute modifier Modifier of the object.
   *   @attribute mCObjectType Type of the object.
   *   @attribute oDAttribute List of attributes of the object.
   */
  ODAnonymousObject implements ODObject, ODValue =
      Modifier?
      ":" MCObjectType
        "{" ODAttribute* "}";

  astrule ODAnonymousObject =
    method public String getName() {
      return "";
    };

  /*========================================================================*/
  /*============================ Attribute =================================*/
  /*========================================================================*/

  /** ASTODAttribute represents an Attribute of an Object.
   *  The attribute may be List, Set or Map valued.
   *  Furthermore, it is possible to specify the collection as incomplete
   *  using "->" or as complete with an equality "=".
   *  @attribute stereotype Optional stereotype of this attribute
   *  @attribute modifier Optional modifier of this attribute
   *  @attribute type Optional type of this attribute
   *  @attribute name Name of this Attribute
   *  @attribute complete True if attribute has a "complete" assignment
   *  @attribute oDValue Attribute value in form of an ODValue
   */
  ODAttribute =
    Stereotype?
    Modifier?
    MCType?
    Name
    ( (complete: "="| "->") ODValue )? ";";

    // this is needed to parse e.g. attr -> 2 correctly:
    splittoken "->";

  /*========================================================================*/
  /*============================= Values ===================================*/
  /*========================================================================*/

  /** ASTODAbsent represents an implementation of the ODValue interface
   *  that represents an absent optional value.
   */
  ODAbsent implements ODValue = "...";

  /** ODSimpleAttributeValue is an implementation of the ODValue interface
   *  that represents a simple value for an attribute, e.g. ints, double or Strings.
   */
  ODSimpleAttributeValue implements ODValue = Expression;

  /** ODName is an implementation of the ODValue interface
   *  that represents a name of an object. Note that this is handled separately
   *  and is not contained by the ODSimpleAttributeValue to enable name
   *  adjustments in sub grammars.
   */
  ODName implements ODValue = NameExpression;

  astrule ODName =
    method public String getName() {
      return nameExpression.getName();
    };

}
