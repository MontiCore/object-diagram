/* (c) https://github.com/MontiCore/monticore */
package de.monticore;

/* Beta-version: This is intended to become a MontiCore stable grammar. */

/**
   ODBasis is the basis for  the OD grammars
   describing UML object diagrams (in the UML/P variant).

   ODBasis defines the core structure of object diagrams,
   consisting of objects (with potentially hierarchical nesting)
   and explicit links.   
*/ 


component grammar ODBasis extends de.monticore.UMLModifier,
                        de.monticore.types.MCBasicTypes,
                        de.monticore.symbols.OOSymbols,
                        de.monticore.literals.MCCommonLiterals {

  /*========================================================================*/
  /*=========================== Artifact ===================================*/
  /*========================================================================*/

  /** ASTODArtifact represents the complete Diagram
    @attribute package The package declaration of this Objectdiagram
    @attribute importStatements List of imported elements
    @attribute oDConformsStatement List of conform statements
    @attribute objectDiagram the ObjectDiagram
  */
  ODArtifact =
    ("package" package:(Name& || ".")+ ";")?
    MCImportStatement*
    ObjectDiagram;

  /*========================================================================*/
  /*================== INTERFACES AND EXTERNAL SYMBOLS =====================*/
  /*========================================================================*/

  /**
   * ASTODValue represents the interface for all possible values
   */
  interface ODValue;

  /**
   * ASTODElement represents the interface for all possible statements 
   * in OD (which are in the basis version: objects and links)
   */
  interface ODElement;

  /**
  * ODObject represents the interface for all possible variants of objects in an OD.
  *   @attribute Modifier Optional Modifier of this object
  *   @attribute MCObjectType Required type of this object
  *   @attribute ODAttribute List of attributes of this object
  */
  interface ODObject = Modifier? MCObjectType ODAttribute*;

  /*========================================================================*/
  /*===================== Grammar, Diagramm, and Object ====================*/
  /*========================================================================*/

  /** ASTObjectDiagram represents a UML Objectdiagram
    consisting of object and link definitions.
    @attribute stereotype  Optional Stereotype
    @attribute name        Name of this Objectdiagram
    @attribute oDObject    List of Objects of this Objectdiagram
    @attribute oDLink      List of Links of this Objectdiagram
  */
  symbol scope ObjectDiagram =
    Stereotype?
    "objectdiagram" Name
    "{"
      ( ODElement ";" )*
    "}";

  /** AST-ODObject represents an Object in a UML Objectdiagram.
    The object contains attributes and may be hierarchically decomposed.
    @attribute oDName Optional extended name of this object
  */
  ODNamedObject implements ODElement, ODObject, ODValue, Variable =
    Modifier?
    Name ":" MCObjectType
      "{" ODAttribute* "}";

  ODAnonymousObject implements ODElement, ODObject, ODValue =
      Modifier?
      ":" MCObjectType
        "{" ODAttribute* "}";

  astrule ODAnonymousObject =
    method public String getName() {
      return "";
    };

  /*========================================================================*/
  /*============================ Attribute =================================*/
  /*========================================================================*/

  /** ASTODAttribute represents an Attribute of an Object.
    The attribute may be List, Set or Map valued.
    Furthermore, it is possible to specify the collection as incomplete
    using "->" or as complete with an equality "=".
    @attribute stereotype Optional stereotype of this attribute
    @attribute modifier Optional modifier of this attribute
    @attribute type Optional type of this attribute
    @attribute name Name of this Attribute
    @attribute complete True if attribute has a "complete" assignment
    @attribute oDValue Attribute value in form of an ODValue
  */
  ODAttribute =
    Stereotype?
    Modifier?
    MCType?
    Name
    ( (complete: "="| "->") ODValue )? ";";


  /*========================================================================*/
  /*============================= Values ===================================*/
  /*========================================================================*/

  /** ASTODAbsent represents implementation of the ODValue interface
      that represents an absent optional value.
  */
  ODAbsent implements ODValue = "...";

// TODO:  for SH
// Entweder wir nehmen hier bereits die Expressions, oder wir nehmen 
// gar keine Literals hier, sondern tun dies erst beim Einbinden in Ausbaustufen
// SignedLiteral hier einzubinden ist jedenfalls suboptimal, da
// später damit keine Expressions mehr definiert werden können:
// Expressions und SignedLiterals beissen sich. Leider.
  ODSignedLiteral implements ODValue = SignedLiteral;

  ODLiteral implements ODValue = Literal;

// TODO: Name wäre dann auch in ExpressionBasis enthalten
/* @BR: Würde über ExpressionBasis NameExpression abgebildet werden. Hier könnte es schwierig
werden, wenn
* der Name erweitert werden soll (wie in OD4Report).
*/
  ODName implements ODValue = Name;

}
