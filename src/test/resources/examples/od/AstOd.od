/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

/*
 * ========================================================== AST for JavaDSL
 */
objectdiagram HelloWorld_AST {
  @!CompilationUnit(1,0):ASTCompilationUnit {
    symbol = absent;
    enclosingScope = @HelloWorld!ArtifactScope;
    spannedScope = absent;
    packageDeclaration = @!PackageDeclaration(1,0):ASTPackageDeclaration {
      symbol = absent;
      enclosingScope = @HelloWorld!ArtifactScope;
      spannedScope = absent;
      annotations = []; // *size: 0
      qualifiedName = @simpleTestClasses!QualifiedName(1,8):ASTQualifiedName {
        parts = ["simpleTestClasses"];
      };
    };
    importDeclarations = []; // *size: 0
    typeDeclarations = [// *size: 1
      @HelloWorld!ClassDeclaration(3,0):ASTClassDeclaration {
        symbol = @HelloWorld!Symbol(3,0);
        enclosingScope = @HelloWorld!ArtifactScope;
        spanningScope = @HelloWorld!Scope;
        modifiers = [// *size: 1
          @!PrimitiveModifier(3,0):ASTPrimitiveModifier {
            symbol = absent;
            enclosingScope = @HelloWorld!Scope;
            spannedScope = absent;
            modifier = 2;
          }];
        name = "HelloWorld";
        typeParameters = absent;
        superClass = absent;
        implementedInterfaces = []; // *size: 0
        classBody = @!ClassBody(3,24):ASTClassBody {
          symbol = absent;
          enclosingScope = @HelloWorld!Scope;
          spannedScope = absent;
          classBodyDeclarations = [// *size: 1
            @!MethodDeclaration(4,2):ASTMethodDeclaration {
              symbol = @main!Symbol(4,2);
              enclosingScope = @HelloWorld!Scope;
              spanningScope = @main!Scope;
              methodSignature = @main!MethodSignature(4,2):ASTMethodSignature {
                symbol = absent;
                enclosingScope = @main!Scope;
                spannedScope = absent;
                modifiers = [// *size: 2
                  @!PrimitiveModifier(4,2):ASTPrimitiveModifier {
                    symbol = absent;
                    enclosingScope = @main!Scope;
                    spannedScope = absent;
                    modifier = 2;
                  },
                  @!PrimitiveModifier(4,9):ASTPrimitiveModifier {
                    symbol = absent;
                    enclosingScope = @main!Scope;
                    spannedScope = absent;
                    modifier = 4;
                  }];
                typeParameters = absent;
                returnType = @!VoidType(4,16):ASTVoidType {
                };
                name = "main";
                formalParameters = @!FormalParameters(4,25):ASTFormalParameters {
                  symbol = absent;
                  enclosingScope = @main!Scope;
                  spannedScope = absent;
                  formalParameterListing = @!FormalParameterListing(4,26):ASTFormalParameterListing {
                    symbol = absent;
                    enclosingScope = @main!Scope;
                    spannedScope = absent;
                    formalParameters = [// *size: 1
                      @args!FormalParameter(4,26):ASTFormalParameter {
                        symbol = @args!Symbol(4,26);
                        enclosingScope = @main!Scope;
                        spannedScope = absent;
                        primitiveModifiers = []; // *size: 0
                        type = @!ComplexArrayType(4,26):ASTComplexArrayType {
                          componentType = @!ComplexReferenceType(4,26):ASTComplexReferenceType {
                            simpleReferenceTypes = 
                              @String!SimpleReferenceType(4,26):ASTSimpleReferenceType {
                                names = ["String"];
                              };
                          };
                          dimensions = 1;
                        };
                        declaratorId = @args!DeclaratorId(4,35):ASTDeclaratorId {
                          symbol = absent;
                          enclosingScope = @main!Scope;
                          spannedScope = absent;
                          name = "args";
                          dim = [];
                        };
                      }];
                    lastFormalParameter = absent;
                  };
                };
                r__throws = absent;
                dim = [];
              };
              methodBody = @!JavaBlock(4,41):ASTJavaBlock {
                symbol = absent;
                enclosingScope = @main!Scope;
                spannedScope = absent;
                blockStatements = [// *size: 1
                  @!ExpressionStatement(5,4):ASTExpressionStatement {
                    symbol = absent;
                    enclosingScope = @main!Scope;
                    spannedScope = absent;
                    expression = @!Expression(5,4):ASTExpression {
                      symbol = absent;
                      enclosingScope = @main!Scope;
                      spannedScope = absent;
                      primaryExpression = absent;
                      name = absent;
                      innerCreator = absent;
                      superSuffix = absent;
                      explicitGenericInvocation = absent;
                      arrayExpression = absent;
                      indexExpression = absent;
                      callExpression = @println!Expression(5,4):ASTExpression {
                        symbol = absent;
                        enclosingScope = @main!Scope;
                        spannedScope = absent;
                        primaryExpression = absent;
                        name = "println";
                        innerCreator = absent;
                        superSuffix = absent;
                        explicitGenericInvocation = absent;
                        arrayExpression = absent;
                        indexExpression = absent;
                        callExpression = absent;
                        parameterExpression = []; // *size: 0
                        creator = absent;
                        typeCastType = absent;
                        expression = @out!Expression(5,4):ASTExpression {
                          symbol = absent;
                          enclosingScope = @main!Scope;
                          spannedScope = absent;
                          primaryExpression = absent;
                          name = "out";
                          innerCreator = absent;
                          superSuffix = absent;
                          explicitGenericInvocation = absent;
                          arrayExpression = absent;
                          indexExpression = absent;
                          callExpression = absent;
                          parameterExpression = []; // *size: 0
                          creator = absent;
                          typeCastType = absent;
                          expression = @!Expression(5,4!2):ASTExpression {
                            symbol = absent;
                            enclosingScope = @main!Scope;
                            spannedScope = absent;
                            primaryExpression = @System!PrimaryExpression(5,4):ASTPrimaryExpression {
                              symbol = absent;
                              enclosingScope = @main!Scope;
                              spannedScope = absent;
                              expression = absent;
                              literal = absent;
                              name = "System";
                              returnType = absent;
                              explicitGenericInvocation = absent;
                              typeArguments = absent;
                              arguments = absent;
                              r__super = false;
                              r__this = false;
                            };
                            name = absent;
                            innerCreator = absent;
                            superSuffix = absent;
                            explicitGenericInvocation = absent;
                            arrayExpression = absent;
                            indexExpression = absent;
                            callExpression = absent;
                            parameterExpression = []; // *size: 0
                            creator = absent;
                            typeCastType = absent;
                            expression = absent;
                            instanceofType = absent;
                            condition = absent;
                            trueExpression = absent;
                            falseExpression = absent;
                            leftExpression = absent;
                            rightExpression = absent;
                            suffixOp = absent;
                            prefixOp = absent;
                            booleanNot = absent;
                            multiplicativeOp = absent;
                            additiveOp = absent;
                            shiftOp = absent;
                            comparison = absent;
                            identityTest = absent;
                            binaryAndOp = absent;
                            binaryXorOp = absent;
                            binaryOrOp = absent;
                            booleanAndOp = absent;
                            booleanOrOp = absent;
                            assignment = absent;
                            r__this = false;
                          };
                          instanceofType = absent;
                          condition = absent;
                          trueExpression = absent;
                          falseExpression = absent;
                          leftExpression = absent;
                          rightExpression = absent;
                          suffixOp = absent;
                          prefixOp = absent;
                          booleanNot = absent;
                          multiplicativeOp = absent;
                          additiveOp = absent;
                          shiftOp = absent;
                          comparison = absent;
                          identityTest = absent;
                          binaryAndOp = absent;
                          binaryXorOp = absent;
                          binaryOrOp = absent;
                          booleanAndOp = absent;
                          booleanOrOp = absent;
                          assignment = absent;
                          r__this = false;
                        };
                        instanceofType = absent;
                        condition = absent;
                        trueExpression = absent;
                        falseExpression = absent;
                        leftExpression = absent;
                        rightExpression = absent;
                        suffixOp = absent;
                        prefixOp = absent;
                        booleanNot = absent;
                        multiplicativeOp = absent;
                        additiveOp = absent;
                        shiftOp = absent;
                        comparison = absent;
                        identityTest = absent;
                        binaryAndOp = absent;
                        binaryXorOp = absent;
                        binaryOrOp = absent;
                        booleanAndOp = absent;
                        booleanOrOp = absent;
                        assignment = absent;
                        r__this = false;
                      };
                      parameterExpression = [// *size: 1
                        @!Expression(5,23):ASTExpression {
                          symbol = absent;
                          enclosingScope = @main!Scope;
                          spannedScope = absent;
                          primaryExpression = @!PrimaryExpression(5,23):ASTPrimaryExpression {
                            symbol = absent;
                            enclosingScope = @main!Scope;
                            spannedScope = absent;
                            expression = absent;
                            literal = @Hello_World_!StringLiteral(5,23):ASTStringLiteral {
                              source = "Hello World!";
                            };
                            name = absent;
                            returnType = absent;
                            explicitGenericInvocation = absent;
                            typeArguments = absent;
                            arguments = absent;
                            r__super = false;
                            r__this = false;
                          };
                          name = absent;
                          innerCreator = absent;
                          superSuffix = absent;
                          explicitGenericInvocation = absent;
                          arrayExpression = absent;
                          indexExpression = absent;
                          callExpression = absent;
                          parameterExpression = []; // *size: 0
                          creator = absent;
                          typeCastType = absent;
                          expression = absent;
                          instanceofType = absent;
                          condition = absent;
                          trueExpression = absent;
                          falseExpression = absent;
                          leftExpression = absent;
                          rightExpression = absent;
                          suffixOp = absent;
                          prefixOp = absent;
                          booleanNot = absent;
                          multiplicativeOp = absent;
                          additiveOp = absent;
                          shiftOp = absent;
                          comparison = absent;
                          identityTest = absent;
                          binaryAndOp = absent;
                          binaryXorOp = absent;
                          binaryOrOp = absent;
                          booleanAndOp = absent;
                          booleanOrOp = absent;
                          assignment = absent;
                          r__this = false;
                        }];
                      creator = absent;
                      typeCastType = absent;
                      expression = absent;
                      instanceofType = absent;
                      condition = absent;
                      trueExpression = absent;
                      falseExpression = absent;
                      leftExpression = absent;
                      rightExpression = absent;
                      suffixOp = absent;
                      prefixOp = absent;
                      booleanNot = absent;
                      multiplicativeOp = absent;
                      additiveOp = absent;
                      shiftOp = absent;
                      comparison = absent;
                      identityTest = absent;
                      binaryAndOp = absent;
                      binaryXorOp = absent;
                      binaryOrOp = absent;
                      booleanAndOp = absent;
                      booleanOrOp = absent;
                      assignment = absent;
                      r__this = false;
                    };
                  }];
              };
            }];
        };
      }];
};}

/*
 * ========================================================== Explanation
 * Shows the AST with all attributes as object diagram
 */
