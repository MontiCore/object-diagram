/*
 * ========================================================== AST for JavaDSL
 */
objectdiagram HelloWorld_AST {
  @!CompilationUnit(1,0):ASTCompilationUnit {
    symbol = Optional_emptypty;
    enclosingScope = @HelloWorld!ArtifactScope;
    spannedScope = Optional_empty;
    packageDeclaration = @!PackageDeclaration(1,0):ASTPackageDeclaration {
      symbol = Optional_emptypty;
      enclosingScope = @HelloWorld!ArtifactScope;
      spannedScope = Optional_empty;
      annotations = []; // *size: 0
      qualifiedName = @simpleTestClasses!QualifiedName(1,8):ASTQualifiedName {
        parts = ["simpleTestClasses"];
      };
    };
    importDeclarations = []; // *size: 0
    typeDeclarations = // *size: 1
      @HelloWorld!ClassDeclaration(3,0):ASTClassDeclaration {
        symbol = @HelloWorld!Symbol(3,0);
        enclosingScope = @HelloWorld!ArtifactScope;
        spanningScope = @HelloWorld!Scope;
        modifiers = // *size: 1
          @!PrimitiveModifier(3,0):ASTPrimitiveModifier {
            symbol = Optional_emptypty;
            enclosingScope = @HelloWorld!Scope;
            spannedScope = Optional_empty;
            modifier = 2;
          };
        name = "HelloWorld";
        typeParameters = Optional_empty;
        superClass = Optional_empty;
        implementedInterfaces = []; // *size: 0
        classBody = @!ClassBody(3,24):ASTClassBody {
          symbol = Optional_emptypty;
          enclosingScope = @HelloWorld!Scope;
          spannedScope = Optional_empty;
          classBodyDeclarations = // *size: 1
            @!MethodDeclaration(4,2):ASTMethodDeclaration {
              symbol = @main!Symbol(4,2);
              enclosingScope = @HelloWorld!Scope;
              spanningScope = @main!Scope;
              methodSignature = @main!MethodSignature(4,2):ASTMethodSignature {
                symbol = Optional_emptypty;
                enclosingScope = @main!Scope;
                spannedScope = Optional_empty;
                modifiers = // *size: 2
                  [@!PrimitiveModifier(4,2):ASTPrimitiveModifier {
                    symbol = Optional_emptypty;
                    enclosingScope = @main!Scope;
                    spannedScope = Optional_empty;
                    modifier = 2;
                  },
                  @!PrimitiveModifier(4,9):ASTPrimitiveModifier {
                    symbol = Optional_emptypty;
                    enclosingScope = @main!Scope;
                    spannedScope = Optional_empty;
                    modifier = 4;
                  }];
                typeParameters = Optional_empty;
                returnType = @!VoidType(4,16):ASTVoidType {
                };
                name = "main";
                formalParameters = @!FormalParameters(4,25):ASTFormalParameters {
                  symbol = Optional_emptypty;
                  enclosingScope = @main!Scope;
                  spannedScope = Optional_empty;
                  formalParameterListing = @!FormalParameterListing(4,26):ASTFormalParameterListing {
                    symbol = Optional_emptypty;
                    enclosingScope = @main!Scope;
                    spannedScope = Optional_empty;
                    formalParameters = // *size: 1
                      @args!FormalParameter(4,26):ASTFormalParameter {
                        symbol = @args!Symbol(4,26);
                        enclosingScope = @main!Scope;
                        spannedScope = Optional_empty;
                        primitiveModifiers = []; // *size: 0
                        type = @!ComplexArrayType(4,26):ASTComplexArrayType {
                          componentType = @!ComplexReferenceType(4,26):ASTComplexReferenceType {
                            simpleReferenceTypes = 
                              @String!SimpleReferenceType(4,26):ASTSimpleReferenceType {
                                names = ["String"];
                              };
                          };
                          dimensions = 1;
                        };
                        declaratorId = @args!DeclaratorId(4,35):ASTDeclaratorId {
                          symbol = Optional_emptypty;
                          enclosingScope = @main!Scope;
                          spannedScope = Optional_empty;
                          name = "args";
                          dim = [];
                        };
                      };
                    lastFormalParameter = Optional_empty;
                  };
                };
                r__throws = Optional_empty;
                dim = [];
              };
              methodBody = @!JavaBlock(4,41):ASTJavaBlock {
                symbol = Optional_emptypty;
                enclosingScope = @main!Scope;
                spannedScope = Optional_empty;
                blockStatements = // *size: 1
                  @!ExpressionStatement(5,4):ASTExpressionStatement {
                    symbol = Optional_emptypty;
                    enclosingScope = @main!Scope;
                    spannedScope = Optional_empty;
                    expression = @!Expression(5,4):ASTExpression {
                      symbol = Optional_emptypty;
                      enclosingScope = @main!Scope;
                      spannedScope = Optional_empty;
                      primaryExpression = Optional_empty;
                      name = Optional_empty;
                      innerCreator = Optional_empty;
                      superSuffix = Optional_empty;
                      explicitGenericInvocation = Optional_empty;
                      arrayExpression = Optional_empty;
                      indexExpression = Optional_empty;
                      callExpression = @println!Expression(5,4):ASTExpression {
                        symbol = Optional_emptypty;
                        enclosingScope = @main!Scope;
                        spannedScope = Optional_empty;
                        primaryExpression = Optional_empty;
                        name = "println";
                        innerCreator = Optional_empty;
                        superSuffix = Optional_empty;
                        explicitGenericInvocation = Optional_empty;
                        arrayExpression = Optional_empty;
                        indexExpression = Optional_empty;
                        callExpression = Optional_empty;
                        parameterExpression = []; // *size: 0
                        creator = Optional_empty;
                        typeCastType = Optional_empty;
                        expression = @out!Expression(5,4):ASTExpression {
                          symbol = Optional_emptypty;
                          enclosingScope = @main!Scope;
                          spannedScope = Optional_empty;
                          primaryExpression = Optional_empty;
                          name = "out";
                          innerCreator = Optional_empty;
                          superSuffix = Optional_empty;
                          explicitGenericInvocation = Optional_empty;
                          arrayExpression = Optional_empty;
                          indexExpression = Optional_empty;
                          callExpression = Optional_empty;
                          parameterExpression = []; // *size: 0
                          creator = Optional_empty;
                          typeCastType = Optional_empty;
                          expression = @!Expression(5,4!2):ASTExpression {
                            symbol = Optional_emptypty;
                            enclosingScope = @main!Scope;
                            spannedScope = Optional_empty;
                            primaryExpression = @System!PrimaryExpression(5,4):ASTPrimaryExpression {
                              symbol = Optional_emptypty;
                              enclosingScope = @main!Scope;
                              spannedScope = Optional_empty;
                              expression = Optional_empty;
                              literal = Optional_empty;
                              name = "System";
                              returnType = Optional_empty;
                              explicitGenericInvocation = Optional_empty;
                              typeArguments = Optional_empty;
                              arguments = Optional_empty;
                              r__super = false;
                              r__this = false;
                            };
                            name = Optional_empty;
                            innerCreator = Optional_empty;
                            superSuffix = Optional_empty;
                            explicitGenericInvocation = Optional_empty;
                            arrayExpression = Optional_empty;
                            indexExpression = Optional_empty;
                            callExpression = Optional_empty;
                            parameterExpression = []; // *size: 0
                            creator = Optional_empty;
                            typeCastType = Optional_empty;
                            expression = Optional_empty;
                            instanceofType = Optional_empty;
                            condition = Optional_empty;
                            trueExpression = Optional_empty;
                            falseExpression = Optional_empty;
                            leftExpression = Optional_empty;
                            rightExpression = Optional_empty;
                            suffixOp = Optional_empty;
                            prefixOp = Optional_empty;
                            booleanNot = Optional_empty;
                            multiplicativeOp = Optional_empty;
                            additiveOp = Optional_empty;
                            shiftOp = Optional_empty;
                            comparison = Optional_empty;
                            identityTest = Optional_empty;
                            binaryAndOp = Optional_empty;
                            binaryXorOp = Optional_empty;
                            binaryOrOp = Optional_empty;
                            booleanAndOp = Optional_empty;
                            booleanOrOp = Optional_empty;
                            assignment = Optional_empty;
                            r__this = false;
                          };
                          instanceofType = Optional_empty;
                          condition = Optional_empty;
                          trueExpression = Optional_empty;
                          falseExpression = Optional_empty;
                          leftExpression = Optional_empty;
                          rightExpression = Optional_empty;
                          suffixOp = Optional_empty;
                          prefixOp = Optional_empty;
                          booleanNot = Optional_empty;
                          multiplicativeOp = Optional_empty;
                          additiveOp = Optional_empty;
                          shiftOp = Optional_empty;
                          comparison = Optional_empty;
                          identityTest = Optional_empty;
                          binaryAndOp = Optional_empty;
                          binaryXorOp = Optional_empty;
                          binaryOrOp = Optional_empty;
                          booleanAndOp = Optional_empty;
                          booleanOrOp = Optional_empty;
                          assignment = Optional_empty;
                          r__this = false;
                        };
                        instanceofType = Optional_empty;
                        condition = Optional_empty;
                        trueExpression = Optional_empty;
                        falseExpression = Optional_empty;
                        leftExpression = Optional_empty;
                        rightExpression = Optional_empty;
                        suffixOp = Optional_empty;
                        prefixOp = Optional_empty;
                        booleanNot = Optional_empty;
                        multiplicativeOp = Optional_empty;
                        additiveOp = Optional_empty;
                        shiftOp = Optional_empty;
                        comparison = Optional_empty;
                        identityTest = Optional_empty;
                        binaryAndOp = Optional_empty;
                        binaryXorOp = Optional_empty;
                        binaryOrOp = Optional_empty;
                        booleanAndOp = Optional_empty;
                        booleanOrOp = Optional_empty;
                        assignment = Optional_empty;
                        r__this = false;
                      };
                      parameterExpression = // *size: 1
                        @!Expression(5,23):ASTExpression {
                          symbol = Optional_emptypty;
                          enclosingScope = @main!Scope;
                          spannedScope = Optional_empty;
                          primaryExpression = @!PrimaryExpression(5,23):ASTPrimaryExpression {
                            symbol = Optional_emptypty;
                            enclosingScope = @main!Scope;
                            spannedScope = Optional_empty;
                            expression = Optional_empty;
                            literal = @Hello_World_!StringLiteral(5,23):ASTStringLiteral {
                              source = "Hello World!";
                            };
                            name = Optional_empty;
                            returnType = Optional_empty;
                            explicitGenericInvocation = Optional_empty;
                            typeArguments = Optional_empty;
                            arguments = Optional_empty;
                            r__super = false;
                            r__this = false;
                          };
                          name = Optional_empty;
                          innerCreator = Optional_empty;
                          superSuffix = Optional_empty;
                          explicitGenericInvocation = Optional_empty;
                          arrayExpression = Optional_empty;
                          indexExpression = Optional_empty;
                          callExpression = Optional_empty;
                          parameterExpression = []; // *size: 0
                          creator = Optional_empty;
                          typeCastType = Optional_empty;
                          expression = Optional_empty;
                          instanceofType = Optional_empty;
                          condition = Optional_empty;
                          trueExpression = Optional_empty;
                          falseExpression = Optional_empty;
                          leftExpression = Optional_empty;
                          rightExpression = Optional_empty;
                          suffixOp = Optional_empty;
                          prefixOp = Optional_empty;
                          booleanNot = Optional_empty;
                          multiplicativeOp = Optional_empty;
                          additiveOp = Optional_empty;
                          shiftOp = Optional_empty;
                          comparison = Optional_empty;
                          identityTest = Optional_empty;
                          binaryAndOp = Optional_empty;
                          binaryXorOp = Optional_empty;
                          binaryOrOp = Optional_empty;
                          booleanAndOp = Optional_empty;
                          booleanOrOp = Optional_empty;
                          assignment = Optional_empty;
                          r__this = false;
                        };
                      creator = Optional_empty;
                      typeCastType = Optional_empty;
                      expression = Optional_empty;
                      instanceofType = Optional_empty;
                      condition = Optional_empty;
                      trueExpression = Optional_empty;
                      falseExpression = Optional_empty;
                      leftExpression = Optional_empty;
                      rightExpression = Optional_empty;
                      suffixOp = Optional_empty;
                      prefixOp = Optional_empty;
                      booleanNot = Optional_empty;
                      multiplicativeOp = Optional_empty;
                      additiveOp = Optional_empty;
                      shiftOp = Optional_empty;
                      comparison = Optional_empty;
                      identityTest = Optional_empty;
                      binaryAndOp = Optional_empty;
                      binaryXorOp = Optional_empty;
                      binaryOrOp = Optional_empty;
                      booleanAndOp = Optional_empty;
                      booleanOrOp = Optional_empty;
                      assignment = Optional_empty;
                      r__this = false;
                    };
                  };
              };
            };
        };
      };
}}

/*
 * ========================================================== Explanation
 * Shows the AST with all attributes as object diagram
 */
