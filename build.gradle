/* (c) https://github.com/MontiCore/monticore */

plugins {
    id 'java'
    id 'maven-publish'
    id "monticore" version "$mc_version" // MontiCore Plugin
    id "com.github.johnrengelman.shadow" version "4.0.4"
    //id "de.set.ecj" version "1.4.1" // Eclipse compiler as it's much faster than javac
}

def commons_version = "1.7.9"
def grammarDir = "src/main/grammars"

group = "de.monticore.lang"
description = "Object Diagram DSL"
sourceCompatibility = "11"

// configure non-standard source sets
sourceSets {
    main {
        java.srcDirs += ["$projectDir/target/generated-sources/monticore/sourcecode"]
      resources.srcDirs = []
    }
    grammars {
      resources {
        srcDirs([grammarDir])
        include "**/*.mc4"
      }
    }
    test {
        java.srcDirs += ["$projectDir/target/generated-test-sources/monticore/sourcecode"]
    }
}

java {
    registerFeature('grammars') {
        usingSourceSet(sourceSets.grammars)
    }
}

subprojects {
    apply plugin: 'idea'
    idea {
        module {
            testSourceDirs += file("$projectDir/target/generated-test-sources/monticore/sourcecode")
        }
    }
}
buildDir = file("$projectDir/target")

configurations { grammar }

dependencies {
    implementation "de.se_rwth.commons:se-commons-logging:$commons_version"
    implementation "de.se_rwth.commons:se-commons-utilities:$commons_version"
    implementation "com.google.guava:guava:23.0"
    implementation "org.antlr:antlr4-runtime:4.7.1"
    implementation "de.monticore:monticore-runtime:$mc_version"
    implementation "de.monticore:monticore-grammar:$mc_version"
    grammar("de.monticore:monticore-grammar:$mc_version") {
        capabilities {
            requireCapability("de.monticore:monticore-grammar-grammars")
        }
    }
    implementation "commons-cli:commons-cli:1.4"
    implementation "org.apache.commons:commons-lang3:3.8.1"

    implementation 'org.apache.commons:commons-lang3:${commons-lang3.version}'
    testImplementation "junit:junit:4.11"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.2"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:5.6.2"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.6.2"
    testImplementation "org.junit.vintage:junit-vintage-engine:5.6.2"
}

configurations {
    ecj
}
dependencies {
    ecj 'org.eclipse.jdt:ecj:3.26.0'
}

repositories {
    maven {
        credentials.username mavenUser
        credentials.password mavenPassword
        url repo
    }
    mavenLocal()
}

def grammarDependencies = ext {
    ODBasis = []
    ODAttribute = ["ODBasis"]
    ODLink = ["ODBasis"]
    OD4Data = ["ODAttribute", "ODLink"]
    OD4Development = ["OD4Data"]
    OD4Report = ["OD4Data", "DateLiterals"]
    DateLiterals = []
    OD4Development = ["OD4Data"]
}

// one task per grammar file
fileTree(grammarDir).matching { include '**/*.mc4' }.each {
    def g = it
    def grammarName = it.getName().substring(0, it.getName().lastIndexOf('.'))

    task "generateGrammar${grammarName}"(type: MCTask) {
        grammar = file g
        outputDir = file "$buildDir/generated-sources/monticore/sourcecode"
        // handcodedPath file("$projectDir/src/main/java")
        def grammarIncludingPackage = file(grammarDir).toURI().relativize(g.toURI()).toString()
        def uptoDate = incCheck(grammarIncludingPackage)
        outputs.upToDateWhen { uptoDate }
    }
}

compileJava {
    tasks.findAll { task -> task.name.startsWith("generateGrammar") }.each {
        def grammarName = it.getName().substring('generateGrammar'.length())
        def dependsOnGrammars = grammarDependencies[grammarName].collect { name -> tasks["generateGrammar${name}"] }
        it.dependsOn dependsOnGrammars
        /*it.outputs.upToDateWhen {
            it.outputs.upToDateWhen && !dependsOnGrammars.any { !it.outputs.upToDateWhen }
        }*/
    }

    dependsOn project.collect { it.tasks.findAll { task -> task.name.startsWith("generateGrammar") } }
}

compileTestJava {
    dependsOn project.collect { it.tasks.withType(MCTask) }
}

test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
        showStackTraces = true
        showStandardStreams = true
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }
}

tasks.withType(JavaCompile) {
  options.fork = true
  options.encoding = "UTF-8"
  options.deprecation false
  options.warnings = false
  options.headerOutputDirectory.convention(null)
  options.forkOptions.with {
      executable = 'java'
      jvmArgs = ['-classpath', project.configurations.ecj.asPath, 'org.eclipse.jdt.internal.compiler.batch.Main', '-nowarn', "-Xmx2048m"]
  }
}

// build sources jar in addition
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = "sources"
}

sourcesJar.dependsOn project.collect { it.tasks.withType(MCTask)}

jar.dependsOn(sourcesJar)

// build javadoc jar in addition
task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = "javadoc"
}
//jar.dependsOn(javadocJar)

// generated java doc contains errors, disable for now
javadoc.failOnError(false)

// build grammar jar as well
task grammarJar(type: Jar) {
    from("$projectDir/src/main/grammars/") { include "**/*.mc4" }
    archiveClassifier = "grammars"
}
jar.dependsOn(grammarJar)

shadowJar {
    archiveFileName = 'MCOD.jar'
    archiveClassifier = "mc-tool"
    manifest {
        attributes('Main-Class': 'de.monticore.od4data.OD4DataTool')
    }
}

task buildOD4DataTool(type: Jar, dependsOn: shadowJar) {
    archiveFileName = 'MCOD4Data.jar'
    archiveClassifier = "od4data-mc-tool"
    manifest {
        attributes('Main-Class': 'de.monticore.od4data.OD4DataTool')
    }
    from zipTree(shadowJar.archiveFile)
}

task buildOD4ReportTool(type: Jar, dependsOn: shadowJar) {
    archiveFileName = 'MCOD4Report.jar'
    archiveClassifier = "od4report-mc-tool"
    manifest {
        attributes('Main-Class': 'de.monticore.od4report.OD4ReportTool')
    }
    from zipTree(shadowJar.archiveFile)
}

jar.dependsOn(buildOD4DataTool)
jar.dependsOn(buildOD4ReportTool)

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the 'test' task
    reportOn tasks.withType(Test)
}

// configure deployment
publishing {
    // configure what artifacts to publish
    publications {
        mavenJava(MavenPublication) {
            artifactId = "$project.name"
            from components.java
            artifact sourcesJar
//            artifact javadocJar
            artifact shadowJar
            artifact buildOD4DataTool
            artifact buildOD4ReportTool
//            artifact grammarJar
        }
    }
    repositories.maven {
        credentials.username mavenUser
        credentials.password mavenPassword
        def releasesRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-releases/"
        def snapshotsRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-snapshots/"
        url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
    }
}

tasks.withType(JavaCompile) {
    options.fork = true
    options.encoding = "UTF-8"
    options.deprecation false
    options.warnings = false
    options.headerOutputDirectory.convention(null)
}
