/* (c) https://github.com/MontiCore/monticore */

plugins {
  id 'java'
  id 'maven-publish'
  id "monticore" version "$mc_version" // MontiCore Plugin
  id "com.github.johnrengelman.shadow" version "$shadow_plugin_version"
  id 'jacoco'
}

def grammarDir = "src/main/grammars"

group = "de.monticore.lang"
description = "Object Diagram DSL"
sourceCompatibility = "11"

// configure non-standard source sets
sourceSets {
  main.java.srcDirs += ["$projectDir/target/generated-sources/monticore/sourcecode"]
  grammars {
    resources {
      srcDirs([grammarDir])
      include "**/*.mc4"
			include "**/*.mlc"
    }
  }
  test {
    java.srcDirs += ["$projectDir/target/generated-test-sources/monticore/sourcecode"]
  }
}

java {
  registerFeature('grammars') {
    usingSourceSet(sourceSets.grammars)
  }
}

subprojects {
  apply plugin: 'idea'
  idea {
    module {
      testSourceDirs += file("$projectDir/target/generated-test-sources/monticore/sourcecode")
    }
  }
}
buildDir = file("$projectDir/target")

configurations { grammar }

dependencies {
	implementation "org.antlr:antlr4-runtime:4.12.0"
	implementation "de.se_rwth.commons:se-commons-logging:$mc_version"
	implementation "de.monticore:monticore-runtime:$mc_version"
	implementation "de.monticore.lang:cd4analysis:$mc_version"
	implementation "de.monticore:monticore-grammar:$mc_version"
	grammar("de.monticore:monticore-grammar:$mc_version") {
		capabilities {
			requireCapability("de.monticore:monticore-grammar-grammars")
		}
	}
	implementation "commons-cli:commons-cli:$commons_cli_version"
	implementation "org.apache.commons:commons-lang3:$commons_lang3_version"
	implementation "com.google.guava:guava:$guava_version"
	testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
	testImplementation "org.junit.jupiter:junit-jupiter-engine:$junit_version"
	testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_version"
	testImplementation "org.junit.vintage:junit-vintage-engine:$junit_version"
}

configurations {
  ecj
}
dependencies {
  ecj 'org.eclipse.jdt:ecj:3.26.0'
}

repositories {
  maven {
    credentials.username mavenUser
    credentials.password mavenPassword
    url repo
  }
  mavenLocal()
}

def grammarDependencies = ext {
  ODBasis = []
  ODAttribute = ["ODBasis"]
  ODLink = ["ODBasis"]
  OD4Data = ["ODAttribute", "ODLink"]
  OD4Development = ["OD4Data"]
  OD4Report = ["OD4Data", "DateLiterals"]
  DateLiterals = []
  OD4Development = ["OD4Data"]
}

// one task per grammar file
fileTree(grammarDir).matching { include '**/*.mc4' }.each {
  def g = it
  def grammarName = it.getName().substring(0, it.getName().lastIndexOf('.'))

  task "generateGrammar${grammarName}"(type: MCTask) {
    grammar = file g
    outputDir = file "$buildDir/generated-sources/monticore/sourcecode"
    // handcodedPath file("$projectDir/src/main/java")
    def grammarIncludingPackage = file(grammarDir).toURI().relativize(g.toURI()).toString()
    def uptoDate = incCheck(grammarIncludingPackage)
    outputs.upToDateWhen { uptoDate }
  }
}

compileJava {
  tasks.findAll { task -> task.name.startsWith("generateGrammar") }.each {
    def grammarName = it.getName().substring('generateGrammar'.length())
    def dependsOnGrammars = grammarDependencies[grammarName].collect { name -> tasks["generateGrammar${name}"] }
    it.dependsOn dependsOnGrammars
    /*it.outputs.upToDateWhen {
        it.outputs.upToDateWhen && !dependsOnGrammars.any { !it.outputs.upToDateWhen }
    }*/
  }

  dependsOn project.collect { it.tasks.findAll { task -> task.name.startsWith("generateGrammar") } }
}

compileTestJava {
  dependsOn project.collect { it.tasks.withType(MCTask) }
}

test {
  useJUnitPlatform()
  testLogging {
    exceptionFormat = 'full'
    showStackTraces = true
    showStandardStreams = true
  }

  // listen to standard out and standard error of the test JVM(s)
  onOutput { descriptor, event ->
    logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
  }
  // prevents gradle from creating reports in target/reports/tests
  reports {
    junitXml.required = false
    html.required = false
  }
}

tasks.withType(JavaCompile) {
  options.fork = true
  options.encoding = "UTF-8"
  options.deprecation false
  options.warnings = false
  options.headerOutputDirectory.convention(null)
  options.forkOptions.with {
    executable = 'java'
		jvmArgs = ['-classpath', project.configurations.ecj.asPath, 'org.eclipse.jdt.internal.compiler.batch.Main', '-nowarn', "-Xmx2048m"]
	}
}

// build sources jar in addition
task sourcesJar(type: Jar) {
	from sourceSets.main.allJava
	archiveClassifier = "sources"
}

sourcesJar.dependsOn project.collect { it.tasks.withType(MCTask) }

jar.dependsOn(sourcesJar)

// build grammar jar as well
task grammarJar(type: Jar) {
	from("$projectDir/src/main/grammars/") { include "**/*.mc4" }
	archiveClassifier = "grammars"
}
jar.dependsOn(grammarJar)

shadowJar {
	archiveFileName = 'MCOD.jar'
	archiveClassifier = "mc-tool"
	manifest {
		attributes('Main-Class': 'de.monticore.od4data.OD4DataTool')
	}
}

task buildOD4DataTool(type: Jar, dependsOn: shadowJar) {
	archiveFileName = 'MCOD4Data.jar'
	archiveClassifier = "od4data-mc-tool"
	manifest {
		attributes('Main-Class': 'de.monticore.od4data.OD4DataTool')
	}
	from zipTree(shadowJar.archiveFile)
}

task buildOD4ReportTool(type: Jar, dependsOn: shadowJar) {
	archiveFileName = 'MCOD4Report.jar'
	archiveClassifier = "od4report-mc-tool"
	manifest {
		attributes('Main-Class': 'de.monticore.od4report.OD4ReportTool')
	}
	from zipTree(shadowJar.archiveFile)
}

task buildOD4DevelopmentTool(type: Jar, dependsOn: shadowJar) {
	archiveFileName = 'MCOD4Development.jar'
	archiveClassifier = "od4development-mc-tool"
	manifest {
		attributes('Main-Class': 'de.monticore.od4development.OD4DevelopmentTool')
	}
	from zipTree(shadowJar.archiveFile)
}

jar.dependsOn(buildOD4DataTool)
jar.dependsOn(buildOD4ReportTool)
jar.dependsOn(buildOD4DevelopmentTool)

task testReport(type: TestReport) {
  destinationDir = file("$buildDir/reports/allTests")
  // Include the results from the 'test' task
  reportOn tasks.withType(Test)
}

// configure deployment
/*publishing {
	// configure what artifacts to publish
	publications {
		mavenJava(MavenPublication) {
			artifactId = "$project.name"
			from components.java
			artifact sourcesJar
			artifact shadowJar
			artifact buildOD4DataTool
			artifact buildOD4ReportTool
		}
	}
	repositories.maven {
		credentials.username mavenUser
		credentials.password mavenPassword
    def releasesRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-releases/"
    def snapshotsRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-snapshots/"
    url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
  }
}*/

tasks.withType(JavaCompile) {
	options.fork = true
	options.encoding = "UTF-8"
	options.deprecation false
	options.warnings = false
	options.headerOutputDirectory.convention(null)
}

/**
 * Integration with MLC language and tool
 */
task showArtifacts {}
task checkArtifacts {}
configurations { MLC }
dependencies {
	MLC(group: 'de.monticore.lang', name: 'mlc-gradle', version: "$version")
}
StringJoiner joiner = new StringJoiner(" ")
configurations.compileClasspath.resolve().each { joiner.add(it.toString()) }
configurations.grammar.resolve().each { joiner.add(it.toString()) }
joiner.add "$projectDir/target/symbols"
String mp = joiner.toString()

// two tasks per MLC file
// each task needs to depend on all internally promoted MLCs
fileTree("src").matching { include '**/*.mlc' }.each {
	def f = it
	def mlcName = it.getName().substring(0, it.getName().lastIndexOf('.'))

	task "showArtifacts${mlcName}"(type: JavaExec) {
		classpath = configurations.MLC
		group = 'MLC'
		mainClass = 'de.monticore.mlc.MLCTool'
		args "-input", f, "-projectDir", projectDir, "-mp", mp, "-s", "-reports", "${buildDir}/reports", "-a", "-noFQ"
		dependsOn("generateGrammar${mlcName}")
		showArtifacts.dependsOn("showArtifacts${mlcName}")
	}

	task "checkArtifacts${mlcName}"(type: JavaExec) {
		classpath = configurations.MLC
		group = 'MLC'
		mainClass = 'de.monticore.mlc.MLCTool'
		args "-input", f, "-projectDir", projectDir, "-mp", mp, "-s", "-check", "-reports", "${buildDir}/reports"
		dependsOn("generateGrammar${mlcName}")
		checkArtifacts.dependsOn("checkArtifacts${mlcName}")
	}
}

// MLC Check dependencies
// always depend on the checks of the mlc models which are allowed by an mlc
checkArtifactsODLink.dependsOn(checkArtifactsODBasis)

checkArtifactsODAttribute.dependsOn(checkArtifactsODBasis)

checkArtifactsOD4Data.dependsOn(checkArtifactsODLink)
checkArtifactsOD4Data.dependsOn(checkArtifactsODAttribute)

checkArtifactsOD4Development.dependsOn(checkArtifactsOD4Data)

checkArtifactsOD4Report.dependsOn(checkArtifactsDateLiterals)
checkArtifactsOD4Report.dependsOn(checkArtifactsOD4Data)

// MLC Show dependencies
// always depend on the shows of the mlc models which are allowed by an mlc
showArtifactsODLink.dependsOn(showArtifactsODBasis)

showArtifactsODAttribute.dependsOn(showArtifactsODBasis)

showArtifactsOD4Data.dependsOn(showArtifactsODLink)
showArtifactsOD4Data.dependsOn(showArtifactsODAttribute)

showArtifactsOD4Development.dependsOn(showArtifactsOD4Data)

showArtifactsOD4Report.dependsOn(showArtifactsDateLiterals)
showArtifactsOD4Report.dependsOn(showArtifactsOD4Data)